Score: 80/90

# 7 - Pivot Example - Lost 2 points
-----------------------------------------------------
Interchanging rows and columns

value |    y.....
-----------------------------
x         |
.          |
.          |
.          |
.          |

value |    x.....
-----------------------------
y         |
.          |
.          |
.          |
.          |

# 10 - Lost 1 point - I have a question here.
---------------------------------------------------------------------
I didn't use the word - 'pure' and 'homogenous'. However, I do understand the concept and was able to describe it.
I am not sure why 'content' is ambiguos. I related this to the definition of entropy (https://en.wikipedia.org/wiki/Information_entropy) - "Entropy is a measure of unpredictability of information content."
Can you pls describe how 'information content' is not right here.

# 11 - Lost 1 point - I have a question here
------------------------------------------------------------------
I didn't explicitly say - 'decrease the stepsize'.I said I would 'adjust' the stepsize/learning rate.
The question didn't ask if you will increase/decrease the parameter. It just asked what parameter should be changed and I answered appropriately saying - "stepsize".Again, not sure if I should have lost the point here, since question never asked it directly.

# 14 - Lost 1 point
------------------------------
I understand the mistake I did here, distance between BD is less as compared to CE. Hence BD are more similar as compared to CE.
On the similarity scale,BD will have a higher similarity as compared

# 15 - Lost 5 points
------------------------------
{
    biz_name: BLONDIE'S,
    biz_category:['PIZZA','FAST FOOD'],
    avg_rating:4.5,
    total_review:20
}

map get_categories: NONE, record => category, (avg_rating x total_review, total_review)
reduce calc_avg: category,(avg_rating, total_review) => category, (sum(avg_rating)/sum(total_review))

Code:
Mapper

for line in open(file):
    dict = json_loads(line)
    if llen dict['biz_category'] = 10:
        yield item['biz_category'], (dict['avg_rating'] x dict['total_review'], dict['total_review'])

Reducer

def calc_avg(self, category, tuple_ratings):
    total_reviews = sum(tuple_ratings[1])
    total_ratings = sum(tuple_rating[0])
    yield category, total_ratings/total_reviews
